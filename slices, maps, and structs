

markdown
# Slices in Go

Slices are a key feature of Go, providing dynamic arrays that can be resized. They are more flexible than arrays because their length can change at runtime.

### Basics of Slices

- **Declaration**: Slices can be declared with zero length or with initial values.
- **Resizing**: With `append`, slices can grow beyond their initial capacity.
- **Slicing**: You can create 'sub-slices' from slices, which share the same underlying array.

```go
// Creating a slice with initial values
var mySlice []int = []int{1, 2, 3, 4, 5}

// Appending elements to the slice
mySlice = append(mySlice, 6) // Now mySlice is [1, 2, 3, 4, 5, 6]

// Creating a subslice
subSlice := mySlice[1:3] // subSlice is [2, 3]

// Checking length and capacity
fmt.Printf("Length: %d, Capacity: %d\n", len(mySlice), cap(mySlice))

// Making a slice with specific length and capacity
emptySlice := make([]int, 3, 5) // length 3, capacity 5

Slice Characteristics
Length (len()): Number of elements in the slice.
Capacity (cap()): Maximum potential length before a new allocation is needed.
Reference Type: Slices are references to arrays; modifying a slice can affect the original array if shared.

Maps in Go
Maps are Go's built-in associative data type (sometimes called hash tables or dictionaries in other languages).

Creating and Using Maps
Initialization: Can be done with a composite literal or make.
Key-Value Pairs: Keys must be comparable types (string, int, etc.).

go
// Creating a map with initial values
var myMap map[string]string = map[string]string{
    "red":   "#ff0000",
    "green": "#00ff00",
    "blue":  "#0000ff",
}

// Adding to the map
myMap["yellow"] = "#ffff00"

// Retrieving values and checking existence
value, exists := myMap["blue"]
if exists {
    fmt.Println("Blue color code:", value)
}

// Removing from the map
delete(myMap, "green")

// Checking if a key exists
if _, exists := myMap["purple"]; !exists {
    fmt.Println("Purple does not exist in the map")
}

Map Characteristics
Unordered: The order of map iteration is not guaranteed.
Zero Value: A map declared without initialization is nil; you can't add to nil maps.

Structs in Go
Structs in Go are used to group data together into a single logical unit.

Defining and Using Structs
Declaration: Define a new type with fields.
Instantiation: Create instances of the struct type.

go
// Defining a struct
type Person struct {
    Name string
    Age  int
    City string
}

// Creating a struct instance
alice := Person{
    Name: "Alice",
    Age:  30,
    City: "New York",
}

// Accessing fields
fmt.Println("Name:", alice.Name)

// Anonymous struct for one-off use
bob := struct {
    Name string
    Age  int
}{
    Name: "Bob",
    Age:  25,
}

// Embedded structs for composition
type Employee struct {
    Person
    Title string
}

charlie := Employee{
    Person: Person{Name: "Charlie", Age: 40, City: "Seattle"},
    Title:  "Engineer",
}

fmt.Println("Employee name:", charlie.Name, "Title:", charlie.Title)

Struct Characteristics
Value Types: Structs are passed by value; changes to a copy do not affect the original.
Methods: Functions can be associated with structs to define behaviors.
Anonymous Fields: Useful for embedding types, allowing direct access to embedded fields.


